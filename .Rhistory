install.packages("remotes")
install.packages("remotes")
remotes::install_github("raimun2/GPStream")
# traemos data de la libreria GPStream
puntos <- GPStream::strava_streams
View(puntos)
library(tidyverse)
table(puntos$id)
# extraigo 1 actividad
actividad <- puntos %>% filter(id == unique(puntos$id)[1])
table(puntos$id)
puntos$id %>% table()
puntos$id %>% table() %>% mean()
mean(table(puntos$id))
puntos$id %>%
table() %>%
mean()
View(actividad)
# vemos a que clase corresponde
class(actividad)
# transformamos a objeto espacial utilizando libreria sf
library(sf)
? st_as_sf
actividad_sf <- sf::st_as_sf(actividad, coords = c("lng","lat"))
write_rds(puntos, "data/puntos.rds")
puntos <- read_rds("data/puntos.rds")
mean(table(puntos$id))
mean(table(puntos$id))
puntos$id %>%
table() %>%
mean()
class(actividad_sf)
# transformamos a objeto espacial utilizando libreria sp
actividad_sp <- sp::SpatialPointsDataFrame(actividad[,c("lng", "lat")], actividad)
class(actividad_sp)
plot(actividad_sf)
plot(actividad_sp)
# transformamos a objeto espacial utilizando libreria sp
actividad_sp <- sp::SpatialPointsDataFrame(actividad[,c("lng", "lat")], actividad)
class(actividad_sp)
plot(actividad_sp)
View(actividad_sp)
plot(actividad_sp@coords)
plot(actividad_sf)
ggplot(actividad_sf) +
geom_sf()
# lineas
actividad_linea <- actividad_sf %>%
group_by(id) %>%
summarise(do_union = FALSE) %>%
sf::st_cast("LINESTRING") %>%
sf::st_set_crs("WGS84")
class(actividad_linea)
plot(actividad_linea, col ="black")
ggplot() +
geom_sf(data = actividad_linea, lwd = 8, lineend = "round")
# poligono
actividad_polygon <- actividad_sf %>%
group_by(id) %>%
summarise(do_union = FALSE) %>%
sf::st_cast("POLYGON") %>%
sf::st_set_crs("WGS84")
class(actividad_polygon)
plot(actividad_polygon, col ="black")
ggplot() +
geom_sf(data = actividad_polygon, lwd = 8, lineend = "round", aes(fill = 1))
ggplot() +
geom_sf(data = actividad_polygon, lwd = 3, lineend = "round", aes(fill = 1))
# raster imagen
imagen <- read_rds("data/mapa.rds")
plot(imagen)
ggmap::ggmap(imagen)
imagen[1,1]
imagen[1,1] %>% col2rgb()
imagen[1,1] %>% col2rgb()/255
## cargo imagen satelital
gee <- read_rds("data/rgee_img.rds")
plot(gee)
plotRGB(gee, stretch = "lin")
# rasterizo los puntos
actividad_raster <- stars::st_rasterize(actividad_sf[,"id"], nx = 50, ny = 50)
class(actividad_raster)
plot(actividad_raster, breaks = "equal")
# analizo metadata
metadata <- GPStream::strava_metadata
summary(metadata)
View(metadata)
metadata$map.summary_polyline[1]
library(googlePolylines)
metadata$map.summary_polyline[1] %>% decode()
metadata$map.summary_polyline[1] %>% decode() %>% plot()
decoda_poly <- metadata$map.summary_polyline[1] %>% decode()
decode_poly <- metadata$map.summary_polyline[1] %>% decode()
plot(decode_poly[[1]])
library(gstat)
library(sp)
head(RDT_gaussian_field)
ozone<-read.table("https://stats.idre.ucla.edu/stat/r/faq/ozone.csv", sep=",", header=T)
head(ozone, n=10)
dists <- dist(ozone[,3:4])
summary(dists)
breaks = seq(0, 1.5, l = 11)
? variog
library(geoR)
? variog
variog(ozone)
library(geoR)
data(package = "geoR")
data(wolfcamp)              # carga el archivo de datos wolfcamp
summary(wolfcamp)
data(wolfcamp)              # carga el archivo de datos wolfcamp
summary(wolfcamp)
plot(wolfcamp)
plot(wolfcamp, lowess = TRUE, scatter3d = TRUE)
plot(wolfcamp, trend=~coords)
points(wolfcamp)
points(wolfcamp, col = "gray", pt.divide = "equal")
data(s100) # Cargar datos estacionarios
summary(s100)
plot(s100)
oldpar <- par(mfrow=c(1,2))
plot(variog(s100))
plot(variog(s100, max.dist = 0.6))
vario <- variog(s100, max.dist = 0.6)
names(vario)
vario.b <- variog(s100, max.dist = 0.6) #discretizado
vario.b <- variog(s100, max.dist = 0.6, op = "bin") #discretizado
vario.c <- variog(s100, max.dist=0.6, op="cloud")  #nube
vario.bc <- variog(s100, max.dist=0.6, bin.cloud=TRUE)  #discretizado+nube
vario.s <- variog(s100, max.dist=0.6, op="sm", band=0.2)  #suavizado
oldpar<-par(mfrow=c(2,2)) # Preparar para 4 gráficos por ventana
plot(vario.b, main="Variograma empírico")
plot(vario.c, main="Nube de puntos variograma")
plot(vario.bc, bin.cloud=TRUE, main="Graficos de cajas")
title("Gráficos de cajas") # Corregir fallo del comando anterior
plot(vario.s, main="Variograma suavizado")
par(oldpar) # Restaurar opciones de gráficos
# Si hay valores atípicos (o la distribución de los datos es asimétrica) puede ser preferible utilizar el estimador robusto
varior.b <- variog(s100, estimator.type = "modulus", max.dist=0.6)
varior.bc <- variog(s100, estimator.type = "modulus", max.dist=0.6, bin.cloud=TRUE)
oldpar<-par(mfrow=c(2,2)) #Preparar para 4 gráficos por ventana
plot(vario.b, main="Estimador clásico")
plot(varior.b, main="Estimador robusto")
plot(vario.bc, bin.cloud=TRUE)
plot(varior.bc, bin.cloud=TRUE)
plot(varior.bc, bin.cloud=TRUE)
par(oldpar) #Restaurar opciones de gráficos
vario.60 <- variog(s100, max.dist = 0.6, direction = pi/3) #variograma en la dirección de 60 grados
# Para estudiar si hay anisotropía, se pueden cálcular de forma rápida variogramas direccionales con la función variog4.
# Por defecto calcula cuatro variogramas direccionales, correspondientes a los ángulos 0, 45, 90 y 135 grados:
vario.4 <- variog4(s100, max.dist = 0.6)
oldpar <- par(mfrow=c(1,2))
plot(vario.60)
title(main = expression(paste("direccional, angulo = ", 60 * degree)))
plot(vario.4, lwd = 2)
par(oldpar)
# ajuste al ojo
vario.b <- variog(s100, max.dist=0.6)
vario.s <- variog(s100, max.dist=0.6,option = "smooth", kernel = "normal", band = 0.2)  #suavizado
plot(vario.b)
lines(vario.s, type = "l", lty = 2)
lines.variomodel(cov.model = "exp", cov.pars = c(1,0.3), nugget = 0, max.dist = 0.6, lwd = 3)
legend(0.3, 0.3, c("empirico", "suavizado", "modelo exponencial"), lty = c(1, 2, 1), lwd = c(1, 1, 3))
par(oldpar)
# ajuste al ojo
vario.b <- variog(s100, max.dist=0.6)
vario.s <- variog(s100, max.dist=0.6,option = "smooth", kernel = "normal", band = 0.2)  #suavizado
plot(vario.b)
lines(vario.s, type = "l", lty = 2)
lines.variomodel(cov.model = "exp", cov.pars = c(1,0.3), nugget = 0, max.dist = 0.6, lwd = 3)
# ajuste al ojo
vario.b <- variog(s100, max.dist=0.6)
vario.s <- variog(s100, max.dist=0.6,option = "smooth", kernel = "normal", band = 0.2)  #suavizado
plot(vario.b)
lines(vario.s, type = "l", lty = 2)
lines.variomodel(cov.model = "exp", cov.pars = c(1,0.3), nugget = 0, max.dist = 0.6, lwd = 3)
legend(0.3, 0.3, c("empirico", "suavizado", "modelo exponencial"), lty = c(1, 2, 1), lwd = c(1, 1, 3))
# otros modelos
plot(vario.b)
lines.variomodel(cov.model = "exp", cov.pars = c(0.9,0.3), nug = 0.1, max.dist = 0.6)
lines.variomodel(cov.model = "mat", cov.pars = c(0.85,0.2), nug = 0.1, kappa = 1, max.dist = 0.6,lty = 2)
lines.variomodel(cov.model = "sph", cov.pars = c(0.8,0.8), nug = 0.1, max.dist = 0.6, lwd = 2)
eyefit(vario.b)
# ajuste con OLS
# ajuste con OLS
vario.ols <- variofit(vario.b, ini = c(1, 0.5), weights = "equal")  #ordinarios
# ajuste con wls
vario.wls <- variofit(vario.b, ini = c(1, 0.5), weights = "cressie")  #ponderados
vario.wls
vario.ols
summary(vario.wls)
vario.ml <- likfit(s100, ini = c(1, 0.5)) #Modelo exponencial con par ini umbral y escala (1/3 rango)
vario.ml
summary(vario.ml)
# ajuste con max verosimilitud resrtingida
vario.reml <- likfit(s100, ini = c(1, 0.5), lik.method = "RML")
summary(vario.reml)
plot(vario.b, main = "Estimador empírico y modelos ajustados")
lines(vario.ml, max.dist = 0.6)
lines(vario.reml, lwd = 2, max.dist = 0.6)
lines(vario.ols, lty = 2, max.dist = 0.6)
lines(vario.wls, lty = 2, lwd = 2, max.dist = 0.6)
legend(0.3, 0.3, legend = c("ML", "REML", "OLS", "WLS"), lty = c(1, 1, 2, 2), lwd = c(1, 2,1, 2))
env.indep <- variog.mc.env(s100, obj.var = vario.b)
env.model <- variog.model.env(s100, obj.var = vario.b, model = vario.wls)
oldpar <- par(mfrow = c(1, 2))
plot(vario.b, envelope = env.indep)
plot(vario.b, envelope = env.model)
lines(vario.wls, lty = 2, lwd = 2, max.dist = 0.6)
par(oldpar)
# validacion cruzada
xv.wls <- xvalid(s100, model = vario.wls)
summary(xv.wls)
xv.reml <- xvalid(s100, model = vario.reml)
summary(xv.reml)
oldpar <- par(mfrow = c(2, 5))
plot(xv.wls, ask = FALSE)
par(oldpar)
? geosphere::distHaversine
plot(s100, lowess = TRUE, scatter3d = TRUE)
plot(s100, trend=~coords)
points(s100)
# Se pueden establecer los tamaños de los puntos, simbolos y colores a partir de los valores de los datos
points(s100, col = "gray", pt.divide = "equal")
plot(wolfcamp)
data(s100) # Cargar datos estacionarios
summary(s100)
plot(s100)
